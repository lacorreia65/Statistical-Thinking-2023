traceplot(fit_m4.6, pars = "sigma")
# Same Model in STAN
stan_m4.6 <- "
data {
int<lower = 1> N;
vector[N] height;
vector[N] weight_s;
vector[N] weight_s2;
}
transformed data{
real bar_x1;
real x1_sd;
vector[N] x1_std;
real y_sd;
bar_x1 = mean(weight_s);
x1_sd = sd(weight_s);
x1_std = (weight_s - bar_x1)/x1_sd; // centered and scaled
y_sd = sd(height);
}
parameters {
real alpha_std;
real beta1_std;
real beta3_std;
real <lower=0> sigma;
}
transformed parameters {
vector[N] mu;
for (i in 1:N)
mu[i] = alpha_std + beta1_std*weight_s[i] +
beta3_std*weight_s2[i];
}
model {
// priors
alpha_std ~ normal(0,20);
beta1_std ~ normal(0,2);
beta3_std ~ normal(0,2);
sigma ~ uniform(0,50);
// sigma ~ normal(5,1.5);
// sigma ~ exponential(1/y_sd);
// model
height ~normal(mu,sigma);
}
generated quantities {
real alpha;
real beta1;
real beta3;
alpha = alpha_std - (beta1_std*bar_x1)/x1_sd
+ (beta3_std*bar_x1^2)/x1_sd^2;
beta1 = beta1_std/x1_sd - 2*(beta3_std*bar_x1)/x1_sd^2;
beta3 = beta3_std/x1_sd^2;
}"
data_m4.6  <- list(
N = nrow(d),
height = d$height,
weight_s = d$weight_s,
weight_s2 = d$weight_s2
)
fit_m4.6 <- stan(data = data_m4.6,
model_code = stan_m4.6,
chains = 4,
iter = 2000)
traceplot(fit_m4.6, pars = "sigma")
sigma_sample <- extract(fit_m4.6)[["sigma"]]
# Same Model in STAN
stan_m4.6 <- "
data {
int<lower = 1> N;
vector[N] height;
vector[N] weight_s;
vector[N] weight_s2;
}
transformed data{
real bar_x1;
real x1_sd;
vector[N] x1_std;
real y_sd;
bar_x1 = mean(weight_s);
x1_sd = sd(weight_s);
x1_std = (weight_s - bar_x1)/x1_sd; // centered and scaled
y_sd = sd(height);
}
parameters {
real alpha_std;
real beta1_std;
real beta3_std;
real <lower=0> sigma;
}
transformed parameters {
vector[N] mu;
for (i in 1:N)
mu[i] = alpha_std + beta1_std*weight_s[i] +
beta3_std*weight_s2[i];
}
model {
// priors
alpha_std ~ normal(0,20);
beta1_std ~ normal(0,2);
beta3_std ~ normal(0,2);
//sigma ~ normal(5,1.5);
sigma ~ exponential(1/y_sd);
// model
height ~normal(mu,sigma);
}
generated quantities {
real alpha;
real beta1;
real beta3;
alpha = alpha_std - (beta1_std*bar_x1)/x1_sd
+ (beta3_std*bar_x1^2)/x1_sd^2;
beta1 = beta1_std/x1_sd - 2*(beta3_std*bar_x1)/x1_sd^2;
beta3 = beta3_std/x1_sd^2;
}"
data_m4.6  <- list(
N = nrow(d),
height = d$height,
weight_s = d$weight_s,
weight_s2 = d$weight_s2
)
fit_m4.6 <- stan(data = data_m4.6,
model_code = stan_m4.6,
chains = 4,
iter = 2000)
print(fit_m4.6, pars = c("alpha","beta1", "beta3", "sigma"))
print(fit_m4.6, pars = c("alpha_std","beta1_std", "beta3_std", "sigma"))
precis(m4.5)
traceplot(fit_m4.6, pars = "sigma")
library(rethinking)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(rstan)
data(Howell1)
# d <-Howell1[Howell1$age>=18,]
d <-Howell1
d |>
ggplot(aes(x=height, y=weight, color=factor(male)))+
geom_point()+
theme_bw()
d |>
ggplot(aes(x=weight))+
geom_density(aes(color=factor(male)))+
theme_bw()
d |>
ggplot(aes(x=height))+
geom_density(aes(color=factor(male)))+
theme_bw()
data(cherry_blossoms)
d2 <-cherry_blossoms
precis(d2)
?cherry_blossoms
View(d2)
data(cherry_blossoms)
d <-cherry_blossoms
d2 <- d[ complete.cases(d$temp)]
data(cherry_blossoms)
d <-cherry_blossoms
d2 <- d[ complete.cases(d$temp),]
precis(d2)
View(d2)
data(cherry_blossoms)
d <-cherry_blossoms
d2 <- d[ complete.cases(d$doy),]
precis(d2)
View(d2)
data(cherry_blossoms)
d <-cherry_blossoms
d2 <- d[ complete.cases(d$temp),]
precis(d2)
?cherry_blossoms
d2 <-d[complete.cases(d$doy),]#completecasesondoy
num_knots <-15
knot_list <-quantile(d2$year,probs=seq(0,1,length.out=num_knots))
View(d2)
library(splines)
B <-bs(d2$year,
knots=knot_list[-c(1,num_knots)] ,
degree=3 ,intercept=TRUE)
View(B)
plot( NULL,xlim=range(d2$year),ylim=c(0,1),xlab="year",ylab="basis")
for (i in 1:ncol(B))lines(d2$year,B[,i])
m4.7 <-quap(
alist(
D ~dnorm(mu,sigma),
mu <-a+B%*%w,
a ~dnorm(100,10),
w ~dnorm(0,10),
sigma ~dexp(1)
), data=list(D=d2$doy,B=B),
start=list( w=rep(0,ncol(B))))
precis(m4.7)
post <-extract.samples(m4.7)
w <-apply(post$w,2,mean)
plot( NULL,xlim=range(d2$year),ylim=c(-6,6),
xlab="year" ,ylab="basis*weight")
for (i in 1:ncol(B))lines(d2$year,w[i]*B[,i])
View(d2)
shade( mu_PI,d2$year,col=col.alpha("black",0.5))
mu <-link(m4.7)
mu_PI <-apply(mu,2,PI,0.97)
plot( d2$year,d2$doy,col=col.alpha(rangi2,0.3),pch=16)
shade( mu_PI,d2$year,col=col.alpha("black",0.5))
post <-extract.samples(m4.7)
w <-apply(post$w,2,mean)
plot( NULL,xlim=range(d2$year),ylim=c(-6,6),
xlab="year" ,ylab="basis*weight")
plot( d2$year,d2$doy,col=col.alpha(rangi2,0.3),pch=16)
for (i in 1:ncol(B))lines(d2$year,w[i]*B[,i])
for (i in 1:ncol(B))lines(d2$year,w[i]*B[,i])
post <-extract.samples(m4.7)
w <-apply(post$w,2,mean)
plot( NULL,xlim=range(d2$year),ylim=c(-6,6),
xlab="year" ,ylab="basis*weight")
for (i in 1:ncol(B))lines(d2$year,w[i]*B[,i])
post <-extract.samples(m4.7)
w <-apply(post$w,2,mean)
#plot( NULL,xlim=range(d2$year),ylim=c(-6,6),
#      xlab="year" ,ylab="basis*weight")
plot( d2$year,d2$doy-103.35,col=col.alpha(rangi2,0.3),pch=16,
xlim=range(d2$year),ylim=c(-6,6),
xlab="year" ,ylab="basis*weight")
for (i in 1:ncol(B))lines(d2$year,w[i]*B[,i])
post <-extract.samples(m4.7)
w <-apply(post$w,2,mean)
#plot( NULL,xlim=range(d2$year),ylim=c(-6,6),
#      xlab="year" ,ylab="basis*weight")
plot( d2$year,d2$doy-103.35,col=col.alpha(rangi2,0.3),pch=16,
xlim=range(d2$year),ylim=c(-16,16),
xlab="year" ,ylab="basis*weight")
for (i in 1:ncol(B))lines(d2$year,w[i]*B[,i])
post <-extract.samples(m4.7)
w <-apply(post$w,2,mean)
#plot( NULL,xlim=range(d2$year),ylim=c(-6,6),
#      xlab="year" ,ylab="basis*weight")
plot( d2$year,d2$doy-103.35,col=col.alpha(rangi2,0.3),pch=16,
xlim=range(d2$year),ylim=c(-26,26),
xlab="year" ,ylab="basis*weight")
for (i in 1:ncol(B))lines(d2$year,w[i]*B[,i])
View(m4.7)
m4.7[[1]]
m4.7$optim$par$a
typeof(m4.7)
m4.7@optim$par
m4.7@optim$par[1]
m4.7@optim$par[18
m4.7@optim$par[18]
m4.7@optim$par[10]
m4.7@optim$par[18]
m4.7@optim$par[18]+1
post <-extract.samples(m4.7)
w <-apply(post$w,2,mean)
#plot( NULL,xlim=range(d2$year),ylim=c(-6,6),
#      xlab="year" ,ylab="basis*weight")
plot( d2$year,d2$doy-m4.7@optim$par[18],col=col.alpha(rangi2,0.3),pch=16,
xlim=range(d2$year),ylim=c(-26,26),
xlab="year" ,ylab="basis*weight")
for (i in 1:ncol(B))lines(d2$year,w[i]*B[,i])
mu <-link(m4.7)
mu_PI <-apply(mu,2,PI,0.97)
plot( d2$year,d2$doy,col=col.alpha(rangi2,0.3),pch=16)
shade( mu_PI,d2$year,col=col.alpha("black",0.5))
m4.7alt <-quap(
alist(
D ~dnorm(mu,sigma),
mu <-a+sapply(1:827,function(i)sum(B[i,]*w)),
a ~dnorm(100,1),
w ~dnorm(0,10),
sigma ~dexp(1)
),
data=list( D=d2$doy,B=B),
start=list( w=rep(0,ncol(B))))
mu <-a+sapply(1:827,function(i)sum(B[i,]*w))
mu <-m4.7@optim$par[18]+sapply(1:827,function(i)sum(B[i,]*w))
data(Howell1)
# d <-Howell1[Howell1$age>=18,]
d <-Howell1
# Same Model in STAN
stan_m4.6 <- "
data {
int<lower = 1> N;
vector[N] height;
vector[N] weight_s;
vector[N] weight_s2;
}
transformed data{
real bar_x1;
real x1_sd;
vector[N] x1_std;
real y_sd;
bar_x1 = mean(weight_s);
x1_sd = sd(weight_s);
x1_std = (weight_s - bar_x1)/x1_sd; // centered and scaled
y_sd = sd(height);
}
parameters {
real alpha_std;
real beta1_std;
real beta3_std;
real <lower=0> sigma;
}
transformed parameters {
vector[N] mu;
for (i in 1:N)
mu[i] = alpha_std + beta1_std*weight_s[i] +
beta3_std*weight_s2[i];
}
model {
// priors
alpha_std ~ normal(0,20);
beta1_std ~ normal(0,2);
beta3_std ~ normal(0,2);
//sigma ~ normal(5,1.5);
sigma ~ exponential(1/y_sd);
// model
height ~normal(mu,sigma);
}
generated quantities {
real alpha;
real beta1;
real beta3;
alpha = alpha_std - (beta1_std*bar_x1)/x1_sd
+ (beta3_std*bar_x1^2)/x1_sd^2;
beta1 = beta1_std/x1_sd - 2*(beta3_std*bar_x1)/x1_sd^2;
beta3 = beta3_std/x1_sd^2;
}"
data_m4.6  <- list(
N = nrow(d),
height = d$height,
weight_s = d$weight_s,
weight_s2 = d$weight_s2
)
fit_m4.6 <- stan(data = data_m4.6,
model_code = stan_m4.6,
chains = 4,
iter = 2000)
d$weight_s <-(d$weight-mean(d$weight))/sd(d$weight)
d$weight_s2 <-d$weight_s^2
m4.5 <-quap(
alist(
height ~dnorm(mu,sigma),
mu <-a+b1*weight_s+b2*weight_s2,
a ~dnorm(178,20),
b1 ~dlnorm(0,1),
b2 ~dnorm(0,1),
sigma ~dunif(0,50)
) ,data=d)
# Same Model in STAN
stan_m4.6 <- "
data {
int<lower = 1> N;
vector[N] height;
vector[N] weight_s;
vector[N] weight_s2;
}
transformed data{
real bar_x1;
real x1_sd;
vector[N] x1_std;
real y_sd;
bar_x1 = mean(weight_s);
x1_sd = sd(weight_s);
x1_std = (weight_s - bar_x1)/x1_sd; // centered and scaled
y_sd = sd(height);
}
parameters {
real alpha_std;
real beta1_std;
real beta3_std;
real <lower=0> sigma;
}
transformed parameters {
vector[N] mu;
for (i in 1:N)
mu[i] = alpha_std + beta1_std*weight_s[i] +
beta3_std*weight_s2[i];
}
model {
// priors
alpha_std ~ normal(0,20);
beta1_std ~ normal(0,2);
beta3_std ~ normal(0,2);
//sigma ~ normal(5,1.5);
sigma ~ exponential(1/y_sd);
// model
height ~normal(mu,sigma);
}
generated quantities {
real alpha;
real beta1;
real beta3;
alpha = alpha_std - (beta1_std*bar_x1)/x1_sd
+ (beta3_std*bar_x1^2)/x1_sd^2;
beta1 = beta1_std/x1_sd - 2*(beta3_std*bar_x1)/x1_sd^2;
beta3 = beta3_std/x1_sd^2;
}"
data_m4.6  <- list(
N = nrow(d),
height = d$height,
weight_s = d$weight_s,
weight_s2 = d$weight_s2
)
fit_m4.6 <- stan(data = data_m4.6,
model_code = stan_m4.6,
chains = 4,
iter = 2000)
print(fit_m4.6, pars = c("alpha","beta1", "beta3", "sigma"))
print(fit_m4.6, pars = c("alpha_std","beta1_std", "beta3_std", "sigma"))
precis(m4.5)
traceplot(fit_m4.6, pars = "sigma")
sigma_sample <- extract(fit_m4.6)[["sigma"]]
n <- 1000
Z <- rbenr(n, .5)
n <- 1000
Z <- rbern(n, .5)
X <- rbern(n, (1-Z)*.1+Z*.9)
Y <- rbern(n, (1-Z)*.1+Z*.9)
cor(X,Y)
abline(lm(Y[Z==1]~X[Z==1]), col=2, lwd=3)
N <- 300
Z <- rbern(N)
X <- rnorm(N,2*Z-1)
Y <- rnorm(N,2*Z-1)
plot(X,Y, col=cols[Z+1], lwd=3)
cols <- c(4,2)
N <- 300
Z <- rbern(N)
X <- rnorm(N,2*Z-1)
Y <- rnorm(N,2*Z-1)
plot(X,Y, col=cols[Z+1], lwd=3)
abline(lm(Y[Z==1]~X[Z==1]), col=2, lwd=3)
cols <- c(4,2)
N <- 300
Z <- rbern(N)
X <- rnorm(N,2*Z-1)
Y <- rnorm(N,2*Z-1)
plot(X,Y, col=cols[Z+1], lwd=3)
abline(lm(Y[Z==1]~X[Z==1]), col=2, lwd=3)
abline(lm(Y[Z==1]~X[Z==1]), col=4, lwd=3)
abline(lm(Y~X), lwd=3)
cols <- c(4,2)
N <- 300
Z <- rbern(N)
X <- rnorm(N,2*Z-1)
Y <- rnorm(N,2*Z-1)
plot(X,Y, col=cols[Z+1], lwd=3)
abline(lm(Y[Z==1]~X[Z==1]), col=2, lwd=3)
abline(lm(Y[Z==0]~X[Z==0]), col=4, lwd=3)
abline(lm(Y~X), lwd=3)
library(rethinking)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(rstan)
data(WaffleDivorce)
d <-WaffleDivorce
# standardizevariables
d$D <-standardize(d$Divorce)
d$M <-standardize(d$Marriage)
d$A <-standardize(d$MedianAgeMarriage)
View(d)
standardize(d$Divorce)
help(standardize)
??standardize
data(WaffleDivorce)
d <-WaffleDivorce
# standardizevariables
d$D <-standardize(d$Divorce)
d$M <-standardize(d$Marriage)
d$A <-standardize(d$MedianAgeMarriage)
View(d)
mean(d$D)
sd(d$D)
density(d$D)
plot(density(d$D))
marriage
density(d$Marriage)
plot(density(d$Marriage))
m5.1 <-quap(
alist(
D ~dnorm(mu,sigma),
mu <-a+bA*A,
a ~dnorm(0,0.2),
bA ~dnorm(0,0.5),
sigma ~dexp(1)
) ,data=d)
precis(m5.1)
data(WaffleDivorce)
d <-WaffleDivorce
# standardizevariables
d$D <-standardize(d$Divorce)
d$M <-standardize(d$Marriage)
d$A <-standardize(d$MedianAgeMarriage)
dat <- list(
D = d$D,
M = d$M,
A = d$A
)
m_DMA <- quap(
alist(
D ~ dnorm(mu, sigma)
mu <- a + bM*M + bA*A,
m_DMA <- quap(
alist(
D ~ dnorm(mu, sigma),
mu <- a + bM*M + bA*A,
a ~dnorm(0,.2),
bM~dnorm(0,.5),
bA~dnorm(0,.5),
sigma~dexp(1)
), data=dat )
precis(m_DMA)
precis(m_DMA)
plot(precis(m_DMA))
