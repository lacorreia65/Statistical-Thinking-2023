}"
data_m4.5  <- list(
N = nrow(d),
height = d$height,
weight_s = d$weight_s,
weight_s2 = d$weight_s2
)
#fit_m4.5 <- stan(data = data_m4.5, model_code = stan_m4.5,
#                 chains = 3, iter = 1000)
fit_m4.6 <- stan(data = data_m4.5, model_code = stan_m4.6,
chains = 3, iter = 1000)
traceplot(fit_m4.5, pars = "b1")
traceplot(fit_m4.6, pars = "beta1")
traceplot(fit_m4.6, pars = "sigma")
print(fit_m4.6)
# Same Model in STAN
stan_m4.6 <- "
data {
int<lower = 1> N;
vector[N] height;
vector[N] weight_s;
vector[N] weight_s2;
}
transformed data{
real bar_x1;
real x1_sd;
vector[N] x1_std;
real y_sd;
bar_x1 = mean(weight_s);
x1_sd = sd(weight_s);
x1_std = (weight_s - bar_x1)/x1_sd; // centered and scaled
y_sd = sd(height);
}
parameters {
real alpha_std;
real beta1_std;
real beta3_std;
real <lower=0> sigma;
}
transformed parameters {
vector[N] mu;
for (i in 1:N)
mu[i] = alpha_std + beta1_std*weight_s[i] +
beta3_std*weight_s2[i];
}
model {
// priors
alpha_std ~ normal(0,20);
beta1_std ~ normal(0,2);
beta3_std ~ normal(0,2);
sigma ~ uniform(0,50);
// sigma ~ exponential(1/y_sd);
// model
height ~normal(mu,sigma);
}
generated quantities {
real alpha;
real beta1;
real beta3;
alpha = alpha_std - (beta1_std*bar_x1)/x1_sd
+ (beta3_std*bar_x1^2)/x1_sd^2;
beta1 = beta1_std/x1_sd - 2*(beta3_std*bar_x1)/x1_sd^2;
beta3 = beta3_std/x1_sd^2;
}"
data_m4.6  <- list(
N = nrow(d),
height = d$height,
weight_s = d$weight_s,
weight_s2 = d$weight_s2
)
fit_m4.6 <- stan(data = data_m4.6,
model_code = stan_m4.6,
iter = 2000)
# Same Model in STAN
stan_m4.6 <- "
data {
int<lower = 1> N;
vector[N] height;
vector[N] weight_s;
vector[N] weight_s2;
}
transformed data{
real bar_x1;
real x1_sd;
vector[N] x1_std;
real y_sd;
bar_x1 = mean(weight_s);
x1_sd = sd(weight_s);
x1_std = (weight_s - bar_x1)/x1_sd; // centered and scaled
y_sd = sd(height);
}
parameters {
real alpha_std;
real beta1_std;
real beta3_std;
real <lower=0> sigma;
}
transformed parameters {
vector[N] mu;
for (i in 1:N)
mu[i] = alpha_std + beta1_std*weight_s[i] +
beta3_std*weight_s2[i];
}
model {
// priors
alpha_std ~ normal(0,20);
beta1_std ~ normal(0,2);
beta3_std ~ normal(0,2);
sigma ~ uniform(0,8);
// sigma ~ exponential(1/y_sd);
// model
height ~normal(mu,sigma);
}
generated quantities {
real alpha;
real beta1;
real beta3;
alpha = alpha_std - (beta1_std*bar_x1)/x1_sd
+ (beta3_std*bar_x1^2)/x1_sd^2;
beta1 = beta1_std/x1_sd - 2*(beta3_std*bar_x1)/x1_sd^2;
beta3 = beta3_std/x1_sd^2;
}"
data_m4.6  <- list(
N = nrow(d),
height = d$height,
weight_s = d$weight_s,
weight_s2 = d$weight_s2
)
fit_m4.6 <- stan(data = data_m4.6,
model_code = stan_m4.6,
iter = 2000)
# Same Model in STAN
stan_m4.6 <- "
data {
int<lower = 1> N;
vector[N] height;
vector[N] weight_s;
vector[N] weight_s2;
}
transformed data{
real bar_x1;
real x1_sd;
vector[N] x1_std;
real y_sd;
bar_x1 = mean(weight_s);
x1_sd = sd(weight_s);
x1_std = (weight_s - bar_x1)/x1_sd; // centered and scaled
y_sd = sd(height);
}
parameters {
real alpha_std;
real beta1_std;
real beta3_std;
real <lower=0> sigma;
}
transformed parameters {
vector[N] mu;
for (i in 1:N)
mu[i] = alpha_std + beta1_std*weight_s[i] +
beta3_std*weight_s2[i];
}
model {
// priors
alpha_std ~ normal(0,20);
beta1_std ~ normal(0,2);
beta3_std ~ normal(0,2);
// sigma ~ uniform(0,50);
sigma ~ exponential(1/y_sd);
// model
height ~normal(mu,sigma);
}
generated quantities {
real alpha;
real beta1;
real beta3;
alpha = alpha_std - (beta1_std*bar_x1)/x1_sd
+ (beta3_std*bar_x1^2)/x1_sd^2;
beta1 = beta1_std/x1_sd - 2*(beta3_std*bar_x1)/x1_sd^2;
beta3 = beta3_std/x1_sd^2;
}"
data_m4.6  <- list(
N = nrow(d),
height = d$height,
weight_s = d$weight_s,
weight_s2 = d$weight_s2
)
fit_m4.6 <- stan(data = data_m4.6,
model_code = stan_m4.6,
iter = 2000)
traceplot(fit_m4.6, pars = "sigma")
# Same Model in STAN
stan_m4.6 <- "
data {
int<lower = 1> N;
vector[N] height;
vector[N] weight_s;
vector[N] weight_s2;
}
transformed data{
real bar_x1;
real x1_sd;
vector[N] x1_std;
real y_sd;
bar_x1 = mean(weight_s);
x1_sd = sd(weight_s);
x1_std = (weight_s - bar_x1)/x1_sd; // centered and scaled
y_sd = sd(height);
}
parameters {
real alpha_std;
real beta1_std;
real beta3_std;
real <lower=0> sigma;
}
transformed parameters {
vector[N] mu;
for (i in 1:N)
mu[i] = alpha_std + beta1_std*weight_s[i] +
beta3_std*weight_s2[i];
}
model {
// priors
alpha_std ~ normal(0,20);
beta1_std ~ normal(0,2);
beta3_std ~ normal(0,2);
// sigma ~ uniform(0,50);
sigma ~ exponential(1/y_sd);
// model
height ~normal(mu,sigma);
}
generated quantities {
real alpha;
real beta1;
real beta3;
alpha = alpha_std - (beta1_std*bar_x1)/x1_sd
+ (beta3_std*bar_x1^2)/x1_sd^2;
beta1 = beta1_std/x1_sd - 2*(beta3_std*bar_x1)/x1_sd^2;
beta3 = beta3_std/x1_sd^2;
}"
data_m4.6  <- list(
N = nrow(d),
height = d$height,
weight_s = d$weight_s,
weight_s2 = d$weight_s2
)
fit_m4.6 <- stan(data = data_m4.6,
model_code = stan_m4.6,
chains = 4,
iter = 2000)
traceplot(fit_m4.6, pars = "sigma")
summary(fit_m4.6)
print(fit_m4.6, pars = c("alpha"))
print(fit_m4.6, pars = c("alpha"))
print(fit_m4.6, pars = c("alpha","beta1", "beta3"))
print(fit_m4.6, pars = c("alpha","beta1", "beta3", "sigma"))
print(fit_m4.6, pars = c("alpha","beta1", "beta3", "sigma"))
precis(m4.5)
print(fit_m4.6, pars = c("alpha","beta1", "beta3", "sigma"))
print(fit_m4.6, pars = c("alpha_std","beta1_std", "beta3_std"))
precis(m4.5)
print(fit_m4.6, pars = c("alpha","beta1", "beta3", "sigma"))
print(fit_m4.6, pars = c("alpha_std","beta1_std", "beta3_std", "sigma"))
precis(m4.5)
sigma_sample <- extract(fit_mn)[["sigma"]]
sigma_sample <- extract(fit_m4.6)[["sigma"]]
hist(sigma_sample)
# Same Model in STAN
stan_m4.6 <- "
data {
int<lower = 1> N;
vector[N] height;
vector[N] weight_s;
vector[N] weight_s2;
}
transformed data{
real bar_x1;
real x1_sd;
vector[N] x1_std;
real y_sd;
bar_x1 = mean(weight_s);
x1_sd = sd(weight_s);
x1_std = (weight_s - bar_x1)/x1_sd; // centered and scaled
y_sd = sd(height);
}
parameters {
real alpha_std;
real beta1_std;
real beta3_std;
real <lower=0> sigma;
}
transformed parameters {
vector[N] mu;
for (i in 1:N)
mu[i] = alpha_std + beta1_std*weight_s[i] +
beta3_std*weight_s2[i];
}
model {
// priors
alpha_std ~ normal(0,20);
beta1_std ~ normal(0,2);
beta3_std ~ normal(0,2);
sigma ~ uniform(5,3);
// sigma ~ exponential(1/y_sd);  // WHY?????
// model
height ~normal(mu,sigma);
}
generated quantities {
real alpha;
real beta1;
real beta3;
alpha = alpha_std - (beta1_std*bar_x1)/x1_sd
+ (beta3_std*bar_x1^2)/x1_sd^2;
beta1 = beta1_std/x1_sd - 2*(beta3_std*bar_x1)/x1_sd^2;
beta3 = beta3_std/x1_sd^2;
}"
data_m4.6  <- list(
N = nrow(d),
height = d$height,
weight_s = d$weight_s,
weight_s2 = d$weight_s2
)
fit_m4.6 <- stan(data = data_m4.6,
model_code = stan_m4.6,
chains = 4,
iter = 2000)
# Same Model in STAN
stan_m4.6 <- "
data {
int<lower = 1> N;
vector[N] height;
vector[N] weight_s;
vector[N] weight_s2;
}
transformed data{
real bar_x1;
real x1_sd;
vector[N] x1_std;
real y_sd;
bar_x1 = mean(weight_s);
x1_sd = sd(weight_s);
x1_std = (weight_s - bar_x1)/x1_sd; // centered and scaled
y_sd = sd(height);
}
parameters {
real alpha_std;
real beta1_std;
real beta3_std;
real <lower=0> sigma;
}
transformed parameters {
vector[N] mu;
for (i in 1:N)
mu[i] = alpha_std + beta1_std*weight_s[i] +
beta3_std*weight_s2[i];
}
model {
// priors
alpha_std ~ normal(0,20);
beta1_std ~ normal(0,2);
beta3_std ~ normal(0,2);
sigma ~ uniform(5,3);
// sigma ~ exponential(1/y_sd);
// model
height ~normal(mu,sigma);
}
generated quantities {
real alpha;
real beta1;
real beta3;
alpha = alpha_std - (beta1_std*bar_x1)/x1_sd
+ (beta3_std*bar_x1^2)/x1_sd^2;
beta1 = beta1_std/x1_sd - 2*(beta3_std*bar_x1)/x1_sd^2;
beta3 = beta3_std/x1_sd^2;
}"
data_m4.6  <- list(
N = nrow(d),
height = d$height,
weight_s = d$weight_s,
weight_s2 = d$weight_s2
)
fit_m4.6 <- stan(data = data_m4.6,
model_code = stan_m4.6,
chains = 4,
iter = 2000)
# Same Model in STAN
stan_m4.6 <- "
data {
int<lower = 1> N;
vector[N] height;
vector[N] weight_s;
vector[N] weight_s2;
}
transformed data{
real bar_x1;
real x1_sd;
vector[N] x1_std;
real y_sd;
bar_x1 = mean(weight_s);
x1_sd = sd(weight_s);
x1_std = (weight_s - bar_x1)/x1_sd; // centered and scaled
y_sd = sd(height);
}
parameters {
real alpha_std;
real beta1_std;
real beta3_std;
real <lower=0> sigma;
}
transformed parameters {
vector[N] mu;
for (i in 1:N)
mu[i] = alpha_std + beta1_std*weight_s[i] +
beta3_std*weight_s2[i];
}
model {
// priors
alpha_std ~ normal(0,20);
beta1_std ~ normal(0,2);
beta3_std ~ normal(0,2);
sigma ~ normal(5,3);
// sigma ~ exponential(1/y_sd);
// model
height ~normal(mu,sigma);
}
generated quantities {
real alpha;
real beta1;
real beta3;
alpha = alpha_std - (beta1_std*bar_x1)/x1_sd
+ (beta3_std*bar_x1^2)/x1_sd^2;
beta1 = beta1_std/x1_sd - 2*(beta3_std*bar_x1)/x1_sd^2;
beta3 = beta3_std/x1_sd^2;
}"
data_m4.6  <- list(
N = nrow(d),
height = d$height,
weight_s = d$weight_s,
weight_s2 = d$weight_s2
)
fit_m4.6 <- stan(data = data_m4.6,
model_code = stan_m4.6,
chains = 4,
iter = 2000)
print(fit_m4.6, pars = c("alpha","beta1", "beta3", "sigma"))
print(fit_m4.6, pars = c("alpha_std","beta1_std", "beta3_std", "sigma"))
precis(m4.5)
traceplot(fit_m4.6, pars = "sigma")
# Same Model in STAN
stan_m4.6 <- "
data {
int<lower = 1> N;
vector[N] height;
vector[N] weight_s;
vector[N] weight_s2;
}
transformed data{
real bar_x1;
real x1_sd;
vector[N] x1_std;
real y_sd;
bar_x1 = mean(weight_s);
x1_sd = sd(weight_s);
x1_std = (weight_s - bar_x1)/x1_sd; // centered and scaled
y_sd = sd(height);
}
parameters {
real alpha_std;
real beta1_std;
real beta3_std;
real <lower=0> sigma;
}
transformed parameters {
vector[N] mu;
for (i in 1:N)
mu[i] = alpha_std + beta1_std*weight_s[i] +
beta3_std*weight_s2[i];
}
model {
// priors
alpha_std ~ normal(0,20);
beta1_std ~ normal(0,2);
beta3_std ~ normal(0,2);
sigma ~ normal(5,1.5);
// sigma ~ exponential(1/y_sd);
// model
height ~normal(mu,sigma);
}
generated quantities {
real alpha;
real beta1;
real beta3;
alpha = alpha_std - (beta1_std*bar_x1)/x1_sd
+ (beta3_std*bar_x1^2)/x1_sd^2;
beta1 = beta1_std/x1_sd - 2*(beta3_std*bar_x1)/x1_sd^2;
beta3 = beta3_std/x1_sd^2;
}"
data_m4.6  <- list(
N = nrow(d),
height = d$height,
weight_s = d$weight_s,
weight_s2 = d$weight_s2
)
fit_m4.6 <- stan(data = data_m4.6,
model_code = stan_m4.6,
chains = 4,
iter = 2000)
print(fit_m4.6, pars = c("alpha","beta1", "beta3", "sigma"))
print(fit_m4.6, pars = c("alpha_std","beta1_std", "beta3_std", "sigma"))
precis(m4.5)
traceplot(fit_m4.6, pars = "sigma")
sigma_sample <- extract(fit_m4.6)[["sigma"]]
hist(sigma_sample)
